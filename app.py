# Arquivo principal do aplicativo Streamlit para "Boris Casa Comigo"
import streamlit as st
from google import genai
from google.genai import types
import os
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
dotenv_path = ".env"
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

# Configurar a API Key do Gemini
client = genai.Client(api_key=os.getenv("GOOGLE_API_KEY"))

# Configura√ß√£o inicial do Streamlit
st.set_page_config(page_title="Boris Casa Comigo", page_icon="üíç")
st.title("‚ú® Boris Casa Comigo ‚ú®")
st.markdown("Oi! Sou o Boris, seu consultor do amor. Vamos planejar um pedido inesquec√≠vel?")

# Inicializa√ß√£o de estado: hist√≥rico e etapa
if 'historico' not in st.session_state:
    st.session_state['historico'] = []
if 'etapa' not in st.session_state:
    st.session_state['etapa'] = 0

# --- Defini√ß√£o dos agentes especializados ---
def agente_introducao(pergunta):
    prompt = f"""
Voc√™ √© o agente de Introdu√ß√£o e Perfil do Casal.
Fa√ßa boas-vindas e colete informa√ß√µes iniciais sobre o casal para personalizar o planejamento.

‚ö†Ô∏è Por favor, n√£o interrompa nenhuma frase ou item de lista no meio. Termine de forma natural.

Hist√≥rico:
{st.session_state['historico']}

Usu√°rio: {pergunta}
Boris:
"""
    return client.models.generate_content(model="gemini-2.0-flash", 
                                          contents=prompt, 
                                          config=types.GenerateContentConfig(max_output_tokens=500)).text

# (Demais agentes seguem mesmo padr√£o)
def agente_informativo(pergunta):
    prompt = f"""
Voc√™ √© o Guia Informativo (Pedido e Noivado).
Explique noivado e pedido, diferen√ßas entre anel, alian√ßa e solit√°rio, em que dedo e m√£o usar e tradi√ß√µes culturais.

‚ö†Ô∏è Por favor, n√£o interrompa nenhuma frase ou item de lista no meio. Termine de forma natural.

Hist√≥rico:
{st.session_state['historico']}

Usu√°rio: {pergunta}
Boris:
"""
    return client.models.generate_content(model="gemini-2.0-flash", 
                                          contents=prompt,
                                          config=types.GenerateContentConfig(max_output_tokens=500)).text

def agente_financeiro(pergunta):
    prompt = f"""
Voc√™ √© o Financeiro e Or√ßamento.
Ajude a definir or√ßamento total, dividir valores (viagem, anel, decora√ß√£o, fotos, m√∫sica etc.) e d√™ recomenda√ß√µes.

‚ö†Ô∏è Por favor, n√£o interrompa nenhuma frase ou item de lista no meio. Termine de forma natural.

Hist√≥rico:
{st.session_state['historico']}

Usu√°rio: {pergunta}
Boris:
"""
    return client.models.generate_content(model="gemini-2.0-flash",
                                          contents=prompt,
                                          config=types.GenerateContentConfig(max_output_tokens=500)).text

def agente_ideias(pergunta):
    prompt = f"""
Voc√™ √© o agente de Ideias Criativas.
Sugira lugares, tipos de surpresa e exemplos pr√°ticos baseados nas prefer√™ncias do casal. Inclua ideias para pedidos e encontros.

‚ö†Ô∏è Por favor, n√£o interrompa nenhuma frase ou item de lista no meio. Termine de forma natural.

Hist√≥rico:
{st.session_state['historico']}

Usu√°rio: {pergunta}
Boris:
"""
    return client.models.generate_content(model="gemini-2.0-flash",
                                          contents=prompt,
                                          config=types.GenerateContentConfig(max_output_tokens=500)).text

def agente_local(pergunta):
    prompt = f"""
Voc√™ √© o agente de Escolha do Local.
Pe√ßa bairro e prefer√™ncias e recomende locais ao ar livre, restaurantes ou viagens. Use sub-agentes conforme necess√°rio.

‚ö†Ô∏è Por favor, n√£o interrompa nenhuma frase ou item de lista no meio. Termine de forma natural.

Hist√≥rico:
{st.session_state['historico']}

Usu√°rio: {pergunta}
Boris:
"""
    return client.models.generate_content(model="gemini-2.0-flash",
                                          contents=prompt,
                                          config=types.GenerateContentConfig(max_output_tokens=500)).text

def agente_joias(pergunta):
    prompt = f"""
Voc√™ √© o agente de Alian√ßas e Joias.
Sugira estilos, metais (ouro, prata, ros√©, platina) e pedras, dentro do or√ßamento.

‚ö†Ô∏è Por favor, n√£o interrompa nenhuma frase ou item de lista no meio. Termine de forma natural.

Hist√≥rico:
{st.session_state['historico']}

Usu√°rio: {pergunta}
Boris:
"""
    return client.models.generate_content(model="gemini-2.0-flash",
                                          contents=prompt,
                                          config=types.GenerateContentConfig(max_output_tokens=500)).text

def agente_planejamento_tarefas(pergunta):
    prompt = f"""
Voc√™ √© o agente de Planejamento de Tarefas.
Defina data/hora ideal, crie passo a passo e evite conflitos. Gere cronograma para o Google Calendar.

‚ö†Ô∏è Por favor, n√£o interrompa nenhuma frase ou item de lista no meio. Termine de forma natural.

Hist√≥rico:
{st.session_state['historico']}

Usu√°rio: {pergunta}
Boris:
"""
    return client.models.generate_content(model="gemini-2.0-flash",
                                          contents=prompt,
                                          config=types.GenerateContentConfig(max_output_tokens=500)).text

def agente_planejamento_momento(pergunta):
    prompt = f"""
Voc√™ √© o agente de Planejamento Detalhado do Momento.
Organize discurso, m√∫sica, fotografia, roteiro, plano B e estrat√©gias de surpresa.

‚ö†Ô∏è Por favor, n√£o interrompa nenhuma frase ou item de lista no meio. Termine de forma natural.

Hist√≥rico:
{st.session_state['historico']}

Usu√°rio: {pergunta}
Boris:
"""
    return client.models.generate_content(model="gemini-2.0-flash",
                                          contents=prompt,
                                          config=types.GenerateContentConfig(max_output_tokens=500)).text

def agente_extras(pergunta):
    prompt = f"""
Voc√™ √© o agente de Extras e Decora√ß√£o.
Sugira flores, ilumina√ß√£o, personaliza√ß√£o do ambiente, cart√µes, brindes e lembrancinhas.

‚ö†Ô∏è Por favor, n√£o interrompa nenhuma frase ou item de lista no meio. Termine de forma natural.

Hist√≥rico:
{st.session_state['historico']}

Usu√°rio: {pergunta}
Boris:
"""
    return client.models.generate_content(model="gemini-2.0-flash",
                                          contents=prompt,
                                          config=types.GenerateContentConfig(max_output_tokens=500)).text

def agente_finalizador(pergunta):
    prompt = f"""
Voc√™ √© o agente Finalizador.
Gere um resumo completo do planejamento, checklist pr√°tico e mensagem de encerramento amig√°vel.

‚ö†Ô∏è Por favor, n√£o interrompa nenhuma frase ou item de lista no meio. Termine de forma natural.

Hist√≥rico:
{st.session_state['historico']}

Usu√°rio: {pergunta}
Boris:
"""
    return client.models.generate_content(model="gemini-2.0-flash",
                                          contents=prompt,
                                          config=types.GenerateContentConfig(max_output_tokens=500)).text

# Ordem fixa dos agentes para fluxo natural
sequencia = [
    agente_introducao,
    agente_informativo,
    agente_financeiro,
    agente_ideias,
    agente_local,
    agente_joias,
    agente_planejamento_tarefas,
    agente_planejamento_momento,
    agente_extras,
    agente_finalizador
]

# Agente Orquestrador sequencial

def agente_orquestrador(pergunta):
    # Usa get para evitar KeyError
    idx = st.session_state.get('etapa', 0)
    agente = sequencia[idx] if idx < len(sequencia) else agente_finalizador
    resposta = agente(pergunta)
    # Incrementa etapa de forma segura
    if idx < len(sequencia) - 1:
        st.session_state['etapa'] = idx + 1
    return resposta

# Interface de chat sequencial
pergunta = st.chat_input("Digite sua mensagem para o Boris...")
if pergunta:
    # Atualiza hist√≥rico
    st.session_state['historico'].append(("Voc√™", pergunta))
    # Chama orquestrador
    resposta = agente_orquestrador(pergunta)
    st.session_state['historico'].append(("Boris", resposta))

# Exibe hist√≥rico da conversa
for nome, msg in st.session_state['historico']:
    with st.chat_message(nome):
        st.write(msg)